Memeory management notes

 - overall memory manager that can track global information about allocations
 - should return shared_pointer/unique_pointer? This will need to explicitly state the destructor
 - each engine component will have its own memory manager
 - Global manager should manage a heap, that the new function will be overridden to point to
 - 


Heap Notes:
 - Still keep free list (determine order - either address or size)
  - address for colencence and size for allocation
  - Could use main list for colescence?
 - Main list still needs a header of at least the size of block (and if allocated?)
 - Need a lock in the metadata?
 - Think we only need single linked list for both lists
 - Free list header should sit where data would be in allocated block
 - if coalese is quick, do it sync, if not in defragmentation thread




Structure
  //Should have ways to patch multiple blocks of memory together
  Stack Allocator class
  Double Stack Allocator class
  Pool Allocator class
  Heap Allocator class


  Global Memeory Manager class {
    AllocateHeap()

    HeapAllocator*

    int total_allocated
    int total_size
  }

  Local Memeory Manager class
  {
    Constructor(size) { alloc/new(size); } 
    Destructor() { free/delete } //Maybe check if need to free anything

    // Each of these will check to see if an allocator has been created
    AllocaateStack()
    AllocateDoubleStack()
    AllocatePool()

    private AllocateInternal() //placement for internal allocators

    static global memeory manager
    StackAllocator* 
    DoubleStackAllocator*
    PoolAllocator

    int current_size
    int allocated
    pointer memory_location
}